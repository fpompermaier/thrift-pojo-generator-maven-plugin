/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.pojo.test.testdata.included.package1;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TestTypesStruct implements org.apache.thrift.TBase<TestTypesStruct, TestTypesStruct._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestTypesStruct");

  private static final org.apache.thrift.protocol.TField SIMPLE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("simpleString", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NON_REQUIRED_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("nonRequiredString", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NUMBER16B_FIELD_DESC = new org.apache.thrift.protocol.TField("number16b", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField NUMBER32B_FIELD_DESC = new org.apache.thrift.protocol.TField("number32b", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NUMBER64B_FIELD_DESC = new org.apache.thrift.protocol.TField("number64b", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField BOOLEAN_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("booleanValue", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField BYTE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("byteValue", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField DOUBLE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleValue", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField ENUM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("enumType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField COMPOSED_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("composedStruct", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TestTypesStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TestTypesStructTupleSchemeFactory());
  }

  public String simpleString; // required
  public String nonRequiredString; // required
  public short number16b; // required
  public int number32b; // required
  public long number64b; // required
  public boolean booleanValue; // required
  public byte byteValue; // required
  public double doubleValue; // required
  /**
   * 
   * @see EnumStruct
   */
  public EnumStruct enumType; // required
  public SimpleStruct ref; // required
  public ObjectInnerStruct composedStruct; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SIMPLE_STRING((short)1, "simpleString"),
    NON_REQUIRED_STRING((short)2, "nonRequiredString"),
    NUMBER16B((short)3, "number16b"),
    NUMBER32B((short)4, "number32b"),
    NUMBER64B((short)5, "number64b"),
    BOOLEAN_VALUE((short)6, "booleanValue"),
    BYTE_VALUE((short)7, "byteValue"),
    DOUBLE_VALUE((short)8, "doubleValue"),
    /**
     * 
     * @see EnumStruct
     */
    ENUM_TYPE((short)9, "enumType"),
    REF((short)10, "ref"),
    COMPOSED_STRUCT((short)11, "composedStruct");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SIMPLE_STRING
          return SIMPLE_STRING;
        case 2: // NON_REQUIRED_STRING
          return NON_REQUIRED_STRING;
        case 3: // NUMBER16B
          return NUMBER16B;
        case 4: // NUMBER32B
          return NUMBER32B;
        case 5: // NUMBER64B
          return NUMBER64B;
        case 6: // BOOLEAN_VALUE
          return BOOLEAN_VALUE;
        case 7: // BYTE_VALUE
          return BYTE_VALUE;
        case 8: // DOUBLE_VALUE
          return DOUBLE_VALUE;
        case 9: // ENUM_TYPE
          return ENUM_TYPE;
        case 10: // REF
          return REF;
        case 11: // COMPOSED_STRUCT
          return COMPOSED_STRUCT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBER16B_ISSET_ID = 0;
  private static final int __NUMBER32B_ISSET_ID = 1;
  private static final int __NUMBER64B_ISSET_ID = 2;
  private static final int __BOOLEANVALUE_ISSET_ID = 3;
  private static final int __BYTEVALUE_ISSET_ID = 4;
  private static final int __DOUBLEVALUE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SIMPLE_STRING, new org.apache.thrift.meta_data.FieldMetaData("simpleString", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NON_REQUIRED_STRING, new org.apache.thrift.meta_data.FieldMetaData("nonRequiredString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER16B, new org.apache.thrift.meta_data.FieldMetaData("number16b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.NUMBER32B, new org.apache.thrift.meta_data.FieldMetaData("number32b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER64B, new org.apache.thrift.meta_data.FieldMetaData("number64b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BOOLEAN_VALUE, new org.apache.thrift.meta_data.FieldMetaData("booleanValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BYTE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("byteValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DOUBLE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("doubleValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ENUM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("enumType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EnumStruct.class)));
    tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleStruct.class)));
    tmpMap.put(_Fields.COMPOSED_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("composedStruct", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ObjectInnerStruct.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestTypesStruct.class, metaDataMap);
  }

  public TestTypesStruct() {
  }

  public TestTypesStruct(
    String simpleString,
    String nonRequiredString,
    short number16b,
    int number32b,
    long number64b,
    boolean booleanValue,
    byte byteValue,
    double doubleValue,
    EnumStruct enumType,
    SimpleStruct ref,
    ObjectInnerStruct composedStruct)
  {
    this();
    this.simpleString = simpleString;
    this.nonRequiredString = nonRequiredString;
    this.number16b = number16b;
    setNumber16bIsSet(true);
    this.number32b = number32b;
    setNumber32bIsSet(true);
    this.number64b = number64b;
    setNumber64bIsSet(true);
    this.booleanValue = booleanValue;
    setBooleanValueIsSet(true);
    this.byteValue = byteValue;
    setByteValueIsSet(true);
    this.doubleValue = doubleValue;
    setDoubleValueIsSet(true);
    this.enumType = enumType;
    this.ref = ref;
    this.composedStruct = composedStruct;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestTypesStruct(TestTypesStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSimpleString()) {
      this.simpleString = other.simpleString;
    }
    if (other.isSetNonRequiredString()) {
      this.nonRequiredString = other.nonRequiredString;
    }
    this.number16b = other.number16b;
    this.number32b = other.number32b;
    this.number64b = other.number64b;
    this.booleanValue = other.booleanValue;
    this.byteValue = other.byteValue;
    this.doubleValue = other.doubleValue;
    if (other.isSetEnumType()) {
      this.enumType = other.enumType;
    }
    if (other.isSetRef()) {
      this.ref = new SimpleStruct(other.ref);
    }
    if (other.isSetComposedStruct()) {
      this.composedStruct = new ObjectInnerStruct(other.composedStruct);
    }
  }

  public TestTypesStruct deepCopy() {
    return new TestTypesStruct(this);
  }

  @Override
  public void clear() {
    this.simpleString = null;
    this.nonRequiredString = null;
    setNumber16bIsSet(false);
    this.number16b = 0;
    setNumber32bIsSet(false);
    this.number32b = 0;
    setNumber64bIsSet(false);
    this.number64b = 0;
    setBooleanValueIsSet(false);
    this.booleanValue = false;
    setByteValueIsSet(false);
    this.byteValue = 0;
    setDoubleValueIsSet(false);
    this.doubleValue = 0.0;
    this.enumType = null;
    this.ref = null;
    this.composedStruct = null;
  }

  public String getSimpleString() {
    return this.simpleString;
  }

  public TestTypesStruct setSimpleString(String simpleString) {
    this.simpleString = simpleString;
    return this;
  }

  public void unsetSimpleString() {
    this.simpleString = null;
  }

  /** Returns true if field simpleString is set (has been assigned a value) and false otherwise */
  public boolean isSetSimpleString() {
    return this.simpleString != null;
  }

  public void setSimpleStringIsSet(boolean value) {
    if (!value) {
      this.simpleString = null;
    }
  }

  public String getNonRequiredString() {
    return this.nonRequiredString;
  }

  public TestTypesStruct setNonRequiredString(String nonRequiredString) {
    this.nonRequiredString = nonRequiredString;
    return this;
  }

  public void unsetNonRequiredString() {
    this.nonRequiredString = null;
  }

  /** Returns true if field nonRequiredString is set (has been assigned a value) and false otherwise */
  public boolean isSetNonRequiredString() {
    return this.nonRequiredString != null;
  }

  public void setNonRequiredStringIsSet(boolean value) {
    if (!value) {
      this.nonRequiredString = null;
    }
  }

  public short getNumber16b() {
    return this.number16b;
  }

  public TestTypesStruct setNumber16b(short number16b) {
    this.number16b = number16b;
    setNumber16bIsSet(true);
    return this;
  }

  public void unsetNumber16b() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER16B_ISSET_ID);
  }

  /** Returns true if field number16b is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber16b() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER16B_ISSET_ID);
  }

  public void setNumber16bIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER16B_ISSET_ID, value);
  }

  public int getNumber32b() {
    return this.number32b;
  }

  public TestTypesStruct setNumber32b(int number32b) {
    this.number32b = number32b;
    setNumber32bIsSet(true);
    return this;
  }

  public void unsetNumber32b() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER32B_ISSET_ID);
  }

  /** Returns true if field number32b is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber32b() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER32B_ISSET_ID);
  }

  public void setNumber32bIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER32B_ISSET_ID, value);
  }

  public long getNumber64b() {
    return this.number64b;
  }

  public TestTypesStruct setNumber64b(long number64b) {
    this.number64b = number64b;
    setNumber64bIsSet(true);
    return this;
  }

  public void unsetNumber64b() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER64B_ISSET_ID);
  }

  /** Returns true if field number64b is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber64b() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER64B_ISSET_ID);
  }

  public void setNumber64bIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER64B_ISSET_ID, value);
  }

  public boolean isBooleanValue() {
    return this.booleanValue;
  }

  public TestTypesStruct setBooleanValue(boolean booleanValue) {
    this.booleanValue = booleanValue;
    setBooleanValueIsSet(true);
    return this;
  }

  public void unsetBooleanValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLEANVALUE_ISSET_ID);
  }

  /** Returns true if field booleanValue is set (has been assigned a value) and false otherwise */
  public boolean isSetBooleanValue() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLEANVALUE_ISSET_ID);
  }

  public void setBooleanValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLEANVALUE_ISSET_ID, value);
  }

  public byte getByteValue() {
    return this.byteValue;
  }

  public TestTypesStruct setByteValue(byte byteValue) {
    this.byteValue = byteValue;
    setByteValueIsSet(true);
    return this;
  }

  public void unsetByteValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTEVALUE_ISSET_ID);
  }

  /** Returns true if field byteValue is set (has been assigned a value) and false otherwise */
  public boolean isSetByteValue() {
    return EncodingUtils.testBit(__isset_bitfield, __BYTEVALUE_ISSET_ID);
  }

  public void setByteValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTEVALUE_ISSET_ID, value);
  }

  public double getDoubleValue() {
    return this.doubleValue;
  }

  public TestTypesStruct setDoubleValue(double doubleValue) {
    this.doubleValue = doubleValue;
    setDoubleValueIsSet(true);
    return this;
  }

  public void unsetDoubleValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID);
  }

  /** Returns true if field doubleValue is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleValue() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID);
  }

  public void setDoubleValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID, value);
  }

  /**
   * 
   * @see EnumStruct
   */
  public EnumStruct getEnumType() {
    return this.enumType;
  }

  /**
   * 
   * @see EnumStruct
   */
  public TestTypesStruct setEnumType(EnumStruct enumType) {
    this.enumType = enumType;
    return this;
  }

  public void unsetEnumType() {
    this.enumType = null;
  }

  /** Returns true if field enumType is set (has been assigned a value) and false otherwise */
  public boolean isSetEnumType() {
    return this.enumType != null;
  }

  public void setEnumTypeIsSet(boolean value) {
    if (!value) {
      this.enumType = null;
    }
  }

  public SimpleStruct getRef() {
    return this.ref;
  }

  public TestTypesStruct setRef(SimpleStruct ref) {
    this.ref = ref;
    return this;
  }

  public void unsetRef() {
    this.ref = null;
  }

  /** Returns true if field ref is set (has been assigned a value) and false otherwise */
  public boolean isSetRef() {
    return this.ref != null;
  }

  public void setRefIsSet(boolean value) {
    if (!value) {
      this.ref = null;
    }
  }

  public ObjectInnerStruct getComposedStruct() {
    return this.composedStruct;
  }

  public TestTypesStruct setComposedStruct(ObjectInnerStruct composedStruct) {
    this.composedStruct = composedStruct;
    return this;
  }

  public void unsetComposedStruct() {
    this.composedStruct = null;
  }

  /** Returns true if field composedStruct is set (has been assigned a value) and false otherwise */
  public boolean isSetComposedStruct() {
    return this.composedStruct != null;
  }

  public void setComposedStructIsSet(boolean value) {
    if (!value) {
      this.composedStruct = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SIMPLE_STRING:
      if (value == null) {
        unsetSimpleString();
      } else {
        setSimpleString((String)value);
      }
      break;

    case NON_REQUIRED_STRING:
      if (value == null) {
        unsetNonRequiredString();
      } else {
        setNonRequiredString((String)value);
      }
      break;

    case NUMBER16B:
      if (value == null) {
        unsetNumber16b();
      } else {
        setNumber16b((Short)value);
      }
      break;

    case NUMBER32B:
      if (value == null) {
        unsetNumber32b();
      } else {
        setNumber32b((Integer)value);
      }
      break;

    case NUMBER64B:
      if (value == null) {
        unsetNumber64b();
      } else {
        setNumber64b((Long)value);
      }
      break;

    case BOOLEAN_VALUE:
      if (value == null) {
        unsetBooleanValue();
      } else {
        setBooleanValue((Boolean)value);
      }
      break;

    case BYTE_VALUE:
      if (value == null) {
        unsetByteValue();
      } else {
        setByteValue((Byte)value);
      }
      break;

    case DOUBLE_VALUE:
      if (value == null) {
        unsetDoubleValue();
      } else {
        setDoubleValue((Double)value);
      }
      break;

    case ENUM_TYPE:
      if (value == null) {
        unsetEnumType();
      } else {
        setEnumType((EnumStruct)value);
      }
      break;

    case REF:
      if (value == null) {
        unsetRef();
      } else {
        setRef((SimpleStruct)value);
      }
      break;

    case COMPOSED_STRUCT:
      if (value == null) {
        unsetComposedStruct();
      } else {
        setComposedStruct((ObjectInnerStruct)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SIMPLE_STRING:
      return getSimpleString();

    case NON_REQUIRED_STRING:
      return getNonRequiredString();

    case NUMBER16B:
      return Short.valueOf(getNumber16b());

    case NUMBER32B:
      return Integer.valueOf(getNumber32b());

    case NUMBER64B:
      return Long.valueOf(getNumber64b());

    case BOOLEAN_VALUE:
      return Boolean.valueOf(isBooleanValue());

    case BYTE_VALUE:
      return Byte.valueOf(getByteValue());

    case DOUBLE_VALUE:
      return Double.valueOf(getDoubleValue());

    case ENUM_TYPE:
      return getEnumType();

    case REF:
      return getRef();

    case COMPOSED_STRUCT:
      return getComposedStruct();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SIMPLE_STRING:
      return isSetSimpleString();
    case NON_REQUIRED_STRING:
      return isSetNonRequiredString();
    case NUMBER16B:
      return isSetNumber16b();
    case NUMBER32B:
      return isSetNumber32b();
    case NUMBER64B:
      return isSetNumber64b();
    case BOOLEAN_VALUE:
      return isSetBooleanValue();
    case BYTE_VALUE:
      return isSetByteValue();
    case DOUBLE_VALUE:
      return isSetDoubleValue();
    case ENUM_TYPE:
      return isSetEnumType();
    case REF:
      return isSetRef();
    case COMPOSED_STRUCT:
      return isSetComposedStruct();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestTypesStruct)
      return this.equals((TestTypesStruct)that);
    return false;
  }

  public boolean equals(TestTypesStruct that) {
    if (that == null)
      return false;

    boolean this_present_simpleString = true && this.isSetSimpleString();
    boolean that_present_simpleString = true && that.isSetSimpleString();
    if (this_present_simpleString || that_present_simpleString) {
      if (!(this_present_simpleString && that_present_simpleString))
        return false;
      if (!this.simpleString.equals(that.simpleString))
        return false;
    }

    boolean this_present_nonRequiredString = true && this.isSetNonRequiredString();
    boolean that_present_nonRequiredString = true && that.isSetNonRequiredString();
    if (this_present_nonRequiredString || that_present_nonRequiredString) {
      if (!(this_present_nonRequiredString && that_present_nonRequiredString))
        return false;
      if (!this.nonRequiredString.equals(that.nonRequiredString))
        return false;
    }

    boolean this_present_number16b = true;
    boolean that_present_number16b = true;
    if (this_present_number16b || that_present_number16b) {
      if (!(this_present_number16b && that_present_number16b))
        return false;
      if (this.number16b != that.number16b)
        return false;
    }

    boolean this_present_number32b = true;
    boolean that_present_number32b = true;
    if (this_present_number32b || that_present_number32b) {
      if (!(this_present_number32b && that_present_number32b))
        return false;
      if (this.number32b != that.number32b)
        return false;
    }

    boolean this_present_number64b = true;
    boolean that_present_number64b = true;
    if (this_present_number64b || that_present_number64b) {
      if (!(this_present_number64b && that_present_number64b))
        return false;
      if (this.number64b != that.number64b)
        return false;
    }

    boolean this_present_booleanValue = true;
    boolean that_present_booleanValue = true;
    if (this_present_booleanValue || that_present_booleanValue) {
      if (!(this_present_booleanValue && that_present_booleanValue))
        return false;
      if (this.booleanValue != that.booleanValue)
        return false;
    }

    boolean this_present_byteValue = true;
    boolean that_present_byteValue = true;
    if (this_present_byteValue || that_present_byteValue) {
      if (!(this_present_byteValue && that_present_byteValue))
        return false;
      if (this.byteValue != that.byteValue)
        return false;
    }

    boolean this_present_doubleValue = true;
    boolean that_present_doubleValue = true;
    if (this_present_doubleValue || that_present_doubleValue) {
      if (!(this_present_doubleValue && that_present_doubleValue))
        return false;
      if (this.doubleValue != that.doubleValue)
        return false;
    }

    boolean this_present_enumType = true && this.isSetEnumType();
    boolean that_present_enumType = true && that.isSetEnumType();
    if (this_present_enumType || that_present_enumType) {
      if (!(this_present_enumType && that_present_enumType))
        return false;
      if (!this.enumType.equals(that.enumType))
        return false;
    }

    boolean this_present_ref = true && this.isSetRef();
    boolean that_present_ref = true && that.isSetRef();
    if (this_present_ref || that_present_ref) {
      if (!(this_present_ref && that_present_ref))
        return false;
      if (!this.ref.equals(that.ref))
        return false;
    }

    boolean this_present_composedStruct = true && this.isSetComposedStruct();
    boolean that_present_composedStruct = true && that.isSetComposedStruct();
    if (this_present_composedStruct || that_present_composedStruct) {
      if (!(this_present_composedStruct && that_present_composedStruct))
        return false;
      if (!this.composedStruct.equals(that.composedStruct))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TestTypesStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TestTypesStruct typedOther = (TestTypesStruct)other;

    lastComparison = Boolean.valueOf(isSetSimpleString()).compareTo(typedOther.isSetSimpleString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimpleString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simpleString, typedOther.simpleString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNonRequiredString()).compareTo(typedOther.isSetNonRequiredString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonRequiredString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonRequiredString, typedOther.nonRequiredString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber16b()).compareTo(typedOther.isSetNumber16b());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber16b()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number16b, typedOther.number16b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber32b()).compareTo(typedOther.isSetNumber32b());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber32b()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number32b, typedOther.number32b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber64b()).compareTo(typedOther.isSetNumber64b());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber64b()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number64b, typedOther.number64b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBooleanValue()).compareTo(typedOther.isSetBooleanValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBooleanValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.booleanValue, typedOther.booleanValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteValue()).compareTo(typedOther.isSetByteValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteValue, typedOther.byteValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleValue()).compareTo(typedOther.isSetDoubleValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleValue, typedOther.doubleValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnumType()).compareTo(typedOther.isSetEnumType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnumType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enumType, typedOther.enumType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRef()).compareTo(typedOther.isSetRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, typedOther.ref);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComposedStruct()).compareTo(typedOther.isSetComposedStruct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposedStruct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composedStruct, typedOther.composedStruct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestTypesStruct(");
    boolean first = true;

    sb.append("simpleString:");
    if (this.simpleString == null) {
      sb.append("null");
    } else {
      sb.append(this.simpleString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nonRequiredString:");
    if (this.nonRequiredString == null) {
      sb.append("null");
    } else {
      sb.append(this.nonRequiredString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("number16b:");
    sb.append(this.number16b);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number32b:");
    sb.append(this.number32b);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number64b:");
    sb.append(this.number64b);
    first = false;
    if (!first) sb.append(", ");
    sb.append("booleanValue:");
    sb.append(this.booleanValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("byteValue:");
    sb.append(this.byteValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("doubleValue:");
    sb.append(this.doubleValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enumType:");
    if (this.enumType == null) {
      sb.append("null");
    } else {
      sb.append(this.enumType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ref:");
    if (this.ref == null) {
      sb.append("null");
    } else {
      sb.append(this.ref);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("composedStruct:");
    if (this.composedStruct == null) {
      sb.append("null");
    } else {
      sb.append(this.composedStruct);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (simpleString == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'simpleString' was not present! Struct: " + toString());
    }
    if (enumType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'enumType' was not present! Struct: " + toString());
    }
    if (ref == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
    }
    if (composedStruct == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'composedStruct' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (ref != null) {
      ref.validate();
    }
    if (composedStruct != null) {
      composedStruct.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TestTypesStructStandardSchemeFactory implements SchemeFactory {
    public TestTypesStructStandardScheme getScheme() {
      return new TestTypesStructStandardScheme();
    }
  }

  private static class TestTypesStructStandardScheme extends StandardScheme<TestTypesStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TestTypesStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SIMPLE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.simpleString = iprot.readString();
              struct.setSimpleStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NON_REQUIRED_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nonRequiredString = iprot.readString();
              struct.setNonRequiredStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUMBER16B
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.number16b = iprot.readI16();
              struct.setNumber16bIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUMBER32B
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number32b = iprot.readI32();
              struct.setNumber32bIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUMBER64B
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.number64b = iprot.readI64();
              struct.setNumber64bIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BOOLEAN_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.booleanValue = iprot.readBool();
              struct.setBooleanValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BYTE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.byteValue = iprot.readByte();
              struct.setByteValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DOUBLE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleValue = iprot.readDouble();
              struct.setDoubleValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ENUM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enumType = EnumStruct.findByValue(iprot.readI32());
              struct.setEnumTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ref = new SimpleStruct();
              struct.ref.read(iprot);
              struct.setRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COMPOSED_STRUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.composedStruct = new ObjectInnerStruct();
              struct.composedStruct.read(iprot);
              struct.setComposedStructIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TestTypesStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.simpleString != null) {
        oprot.writeFieldBegin(SIMPLE_STRING_FIELD_DESC);
        oprot.writeString(struct.simpleString);
        oprot.writeFieldEnd();
      }
      if (struct.nonRequiredString != null) {
        oprot.writeFieldBegin(NON_REQUIRED_STRING_FIELD_DESC);
        oprot.writeString(struct.nonRequiredString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUMBER16B_FIELD_DESC);
      oprot.writeI16(struct.number16b);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER32B_FIELD_DESC);
      oprot.writeI32(struct.number32b);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER64B_FIELD_DESC);
      oprot.writeI64(struct.number64b);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOOLEAN_VALUE_FIELD_DESC);
      oprot.writeBool(struct.booleanValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BYTE_VALUE_FIELD_DESC);
      oprot.writeByte(struct.byteValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOUBLE_VALUE_FIELD_DESC);
      oprot.writeDouble(struct.doubleValue);
      oprot.writeFieldEnd();
      if (struct.enumType != null) {
        oprot.writeFieldBegin(ENUM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.enumType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.ref != null) {
        oprot.writeFieldBegin(REF_FIELD_DESC);
        struct.ref.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.composedStruct != null) {
        oprot.writeFieldBegin(COMPOSED_STRUCT_FIELD_DESC);
        struct.composedStruct.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TestTypesStructTupleSchemeFactory implements SchemeFactory {
    public TestTypesStructTupleScheme getScheme() {
      return new TestTypesStructTupleScheme();
    }
  }

  private static class TestTypesStructTupleScheme extends TupleScheme<TestTypesStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TestTypesStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.simpleString);
      oprot.writeI32(struct.enumType.getValue());
      struct.ref.write(oprot);
      struct.composedStruct.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetNonRequiredString()) {
        optionals.set(0);
      }
      if (struct.isSetNumber16b()) {
        optionals.set(1);
      }
      if (struct.isSetNumber32b()) {
        optionals.set(2);
      }
      if (struct.isSetNumber64b()) {
        optionals.set(3);
      }
      if (struct.isSetBooleanValue()) {
        optionals.set(4);
      }
      if (struct.isSetByteValue()) {
        optionals.set(5);
      }
      if (struct.isSetDoubleValue()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetNonRequiredString()) {
        oprot.writeString(struct.nonRequiredString);
      }
      if (struct.isSetNumber16b()) {
        oprot.writeI16(struct.number16b);
      }
      if (struct.isSetNumber32b()) {
        oprot.writeI32(struct.number32b);
      }
      if (struct.isSetNumber64b()) {
        oprot.writeI64(struct.number64b);
      }
      if (struct.isSetBooleanValue()) {
        oprot.writeBool(struct.booleanValue);
      }
      if (struct.isSetByteValue()) {
        oprot.writeByte(struct.byteValue);
      }
      if (struct.isSetDoubleValue()) {
        oprot.writeDouble(struct.doubleValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TestTypesStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.simpleString = iprot.readString();
      struct.setSimpleStringIsSet(true);
      struct.enumType = EnumStruct.findByValue(iprot.readI32());
      struct.setEnumTypeIsSet(true);
      struct.ref = new SimpleStruct();
      struct.ref.read(iprot);
      struct.setRefIsSet(true);
      struct.composedStruct = new ObjectInnerStruct();
      struct.composedStruct.read(iprot);
      struct.setComposedStructIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.nonRequiredString = iprot.readString();
        struct.setNonRequiredStringIsSet(true);
      }
      if (incoming.get(1)) {
        struct.number16b = iprot.readI16();
        struct.setNumber16bIsSet(true);
      }
      if (incoming.get(2)) {
        struct.number32b = iprot.readI32();
        struct.setNumber32bIsSet(true);
      }
      if (incoming.get(3)) {
        struct.number64b = iprot.readI64();
        struct.setNumber64bIsSet(true);
      }
      if (incoming.get(4)) {
        struct.booleanValue = iprot.readBool();
        struct.setBooleanValueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.byteValue = iprot.readByte();
        struct.setByteValueIsSet(true);
      }
      if (incoming.get(6)) {
        struct.doubleValue = iprot.readDouble();
        struct.setDoubleValueIsSet(true);
      }
    }
  }

}

