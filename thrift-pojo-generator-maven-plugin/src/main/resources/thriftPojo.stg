group thriftPojo;

parameterDeclaration(param) ::= <<
<if(param.isPojo || param.isEnumPojo)>
private <param.pojoType> <param.nameLowerCase>;
<else>	
private <param.type> <param.nameLowerCase>;
<endif>
>>

parameterEnumDefinition() ::= <<
public enum Fields{
	<trunc(parameters):parameterEnumParamWithSeparator()><last(parameters):parameterEnumParam()>
};
>>

parameterEnumParam(param) ::= <<
<param.nameUpperCase>
>>

parameterEnumParamWithSeparator(param) ::= <<
<param.nameUpperCase>, 
>>

parameterGetterSetter(param) ::= <<

public <parameterType(param)> get<param.nameUpperCase>() {
       return <param.nameLowerCase>;
}
public void set<param.nameUpperCase>(<parameterType(param)> <param.nameLowerCase>) {
       this.<param.nameLowerCase> = <param.nameLowerCase>;
}

>>

parameterType(param) ::= <<
	<if(param.isPojo || param.isEnumPojo)><param.pojoType><else><param.type><endif>
>>

remoteResourceParamsWithSeparator(param) ::= <<
	<remoteResourceParams(param)>,<\ >
>>

remoteResourceParams(param) ::= <<
	<if(param.isPojo || param.isEnumPojo)><param.nameLowerCase>.getRemoteRepresentation()<else><param.nameLowerCase><endif>
>>

remoteResource() ::= <<
public <remoteClass> getRemoteRepresentation(){
	return new <remoteClass>(<trunc(parameters):remoteResourceParamsWithSeparator()><last(parameters):remoteResourceParams()>);
}
>>

constructorRemoteParameterSetter(param) ::= <<
<\n>this.<param.nameLowerCase> = <if(param.isPojo)>new <param.pojoType>(remote.<param.nameLowerCase>)<elseif(param.isEnumPojo)><param.pojoType>.getPojoRepresentation(remote.<param.nameLowerCase>)<else>remote.<param.nameLowerCase><endif>;
>>

pojoConstructor() ::= <<
public <pojoClassName>(<remoteClass> remote) {
	super();
	<parameters:constructorRemoteParameterSetter()>
}

public <pojoClassName>(<trunc(parameters):constructorParameterDefWithSeparator()><last(parameters):constructorParameterDef()>) {
	super();
	<parameters:constructorParameterSetter()>
}
>>

constructorParameterDef(param) ::= <<
<parameterType(param)> <param.nameLowerCase>
>>

constructorParameterDefWithSeparator(param) ::= <<
<constructorParameterDef(param)>,
>>

constructorParameterSetter(param) ::= <<
<\n>this.<param.nameLowerCase> = <param.nameLowerCase>;
>>

builder(packageName, remoteClass, pojoClassName, parameters, pojoIntefaceActive, pojoInteface) ::= <<
package <packageName>;

public class <pojoClassName><if(pojoIntefaceActive)> implements <pojoInteface><endif> {
	<parameterEnumDefinition()>

	<parameters:parameterDeclaration()>
	<pojoConstructor()>
	<remoteResource()>
	
	// Getters and Setters
	<parameters:parameterGetterSetter()>
}
>>

enumBuilder(packageName, enumName, pojoEnumName, types) ::= <<
package <packageName>;

public enum <pojoEnumName> {
	<trunc(types):enumTypeWithSeparator()><last(types):enumType()>;

	public static <pojoEnumName> getPojoRepresentation(<enumName> type) {
		return <pojoEnumName>.valueOf(type.name());
	}

	public <enumName> getRemoteRepresentation() {
		return <enumName>.valueOf(this.name());
	}
}
>>

enumTypeWithSeparator(param) ::= <<
	<enumType(param)>,<\ >
>>

enumType(param) ::= <<
	<param>
>>