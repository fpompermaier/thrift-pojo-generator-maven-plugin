group thriftPojo;

parameterDeclaration(param) ::= <<
<if(param.isPojo || param.isEnumPojo)>
private <param.pojoType> <param.nameLowerCase>;
<elseif(param.isGenericCollection)>
private java.util.Map\<<param.pojoKey.pojoType>, <param.pojoValue.pojoType>\> <param.nameLowerCase>;
<else>	
private <param.type> <param.nameLowerCase>;
<endif>
>>

parameterEnumDefinition() ::= <<
public enum Fields{
	<trunc(parameters):parameterEnumParamWithSeparator()><last(parameters):parameterEnumParam()>
};
>>

parameterEnumParam(param) ::= <<
<param.nameUpperCase>
>>

parameterEnumParamWithSeparator(param) ::= <<
<param.nameUpperCase>, 
>>

parameterGetterSetter(param) ::= <<

public <parameterType(param)> get<param.nameUpperCase>() {
       return <param.nameLowerCase>;
}
public void set<param.nameUpperCase>(<parameterType(param)> <param.nameLowerCase>) {
       this.<param.nameLowerCase> = <param.nameLowerCase>;
}
>>

parameterType(param) ::= <<
	<if(param.isPojo || param.isEnumPojo)><param.pojoType><elseif(param.isGenericCollection)>java.util.Map\<<param.pojoKey.pojoType>, <param.pojoValue.pojoType>\><else><param.type><endif>
>>

remoteResourceParamsWithSeparator(param) ::= <<
	<remoteResourceParams(param)>,<\ >
>>

remoteResourceParams(param) ::= <<
	<if(param.isPojo || param.isEnumPojo)><bridgeName(param.pojoType)>.getRemoteRepresentation(pojo.get<param.nameUpperCase>())<elseif(param.isGenericCollection)>getRemoteMapRepresentation<param.nameUpperCase>(pojo.get<param.nameUpperCase>())<else>pojo.get<param.nameUpperCase>()<endif>
>>

constructorRemoteParameterSetter(param) ::= <<
<\n>this.<param.nameLowerCase> = <if(param.isPojo)>new <param.pojoType>(remote.<param.nameLowerCase>)<elseif(param.isEnumPojo)><param.pojoType>.getPojoRepresentation(remote.<param.nameLowerCase>)<else>remote.<param.nameLowerCase><endif>;
>>

pojoConstructor() ::= <<
public <pojoClassName>() {
	super();
}

public <pojoClassName>(<trunc(parameters):constructorParameterDefWithSeparator()><last(parameters):constructorParameterDef()>) {
	super();
	<parameters:constructorParameterSetter()>
}
>>

constructorParameterDef(param) ::= <<
<parameterType(param)> <param.nameLowerCase>
>>

constructorParameterDefWithSeparator(param) ::= <<
<constructorParameterDef(param)>,
>>

constructorParameterSetter(param) ::= <<
<\n>this.<param.nameLowerCase> = <param.nameLowerCase>;
>>

builder(packageName, remoteClass, pojoClassName, parameters, pojoIntefaceActive, pojoInteface, pojoSuperclassActive, pojoSuperclass) ::= <<
package <packageName>;

public class <pojoClassName><if(pojoSuperclassActive)> extends <pojoSuperclass><endif><if(pojoIntefaceActive)> implements <pojoInteface><endif> {
	<parameterEnumDefinition()>

	<parameters:parameterDeclaration()>
	<pojoConstructor()>

	
	// Getters and Setters
	<parameters:parameterGetterSetter()>
}
>>

enumBuilder(packageName, enumName, pojoEnumName, types) ::= <<
package <packageName>;

public enum <pojoEnumName> implements java.io.Serializable {
	<trunc(types):enumTypeWithSeparator()><last(types):enumType()>;
}
>>

enumTypeWithSeparator(param) ::= <<
	<enumType(param)>,<\ >
>>

enumType(param) ::= <<
	<param>
>>

bridgeBuilder(packageName, remoteClass, pojoClassName, parameters) ::= <<
package <packageName>;

public class <bridgeName(pojoClassName)> {

	public static <pojoClassName> getPojoRepresentation(<remoteClass> remote) {
		return new <pojoClassName>(<trunc(parameters):bridgeRemoteParamWithSeparator()><last(parameters):bridgeRemoteParam()>);
	}
	
	public static <remoteClass> getRemoteRepresentation(<pojoClassName> pojo){
		return new <remoteClass>(<trunc(parameters):remoteResourceParamsWithSeparator()><last(parameters):remoteResourceParams()>);
	}
	
<parameters:bridgeRemoteParamMapFunction()>
}
>>

bridgeRemoteParam(param) ::= <<
<if(param.isPojo || param.isEnumPojo)><bridgeName(param.pojoType)>.getPojoRepresentation(remote.<param.nameLowerCase>)<elseif(param.isGenericCollection)>getPojoMapRepresentation<param.nameUpperCase>(remote.<param.nameLowerCase>)<else>remote.<param.nameLowerCase><endif>
>>

bridgeRemoteParamMapFunction(param) ::= <<
<if(param.isGenericCollection)>
	private static java.util.Map\<<param.pojoKey.pojoType>, <param.pojoValue.pojoType>\> getPojoMapRepresentation<param.nameUpperCase>(java.util.Map\<<param.pojoKey.type>, <param.pojoValue.type>\> map) {
		java.util.Map\<<param.pojoKey.pojoType>, <param.pojoValue.pojoType>\> newMap = new java.util.HashMap\<<param.pojoKey.pojoType>, <param.pojoValue.pojoType>\>(map.size());
		for (java.util.Map.Entry\<<param.pojoKey.type>, <param.pojoValue.type>\> entry : map.entrySet()) {
			newMap.put(<if(param.pojoKey.isPojo)><bridgeName(param.pojoKey.pojoType)>.getPojoRepresentation(entry.getKey())<else>entry.getKey()<endif>,
					   <if(param.pojoValue.isPojo)><bridgeName(param.pojoValue.pojoType)>.getPojoRepresentation(entry.getValue())<else>entry.getValue()<endif>);
		}
		
		return newMap;
	}

	private static java.util.Map\<<param.pojoKey.type>, <param.pojoValue.type>\> getRemoteMapRepresentation<param.nameUpperCase>(java.util.Map\<<param.pojoKey.pojoType>, <param.pojoValue.pojoType>\> map) {
		java.util.Map\<<param.pojoKey.type>, <param.pojoValue.type>\> newMap = new java.util.HashMap\<<param.pojoKey.type>, <param.pojoValue.type>\>(map.size());
		for (java.util.Map.Entry\<<param.pojoKey.pojoType>, <param.pojoValue.pojoType>\> entry : map.entrySet()) {
			newMap.put(<if(param.pojoKey.isPojo)><bridgeName(param.pojoKey.pojoType)>.getRemoteRepresentation(entry.getKey())<else>entry.getKey()<endif>,
					   <if(param.pojoValue.isPojo)><bridgeName(param.pojoValue.pojoType)>.getRemoteRepresentation(entry.getValue())<else>entry.getValue()<endif>);
		}
		
		return newMap;
	}
	
<endif>
>>

bridgeRemoteParamWithSeparator(param) ::= <<
<bridgeRemoteParam(param)>, 
>>

bridgeName(type) ::= <<
<type>Bridge
>>

enumBridgeBuilder(packageName, enumName, pojoEnumName, types) ::= <<
package <packageName>;

public class <bridgeName(pojoEnumName)> {
	public static <pojoEnumName> getPojoRepresentation(<enumName> type) {
		return <pojoEnumName>.valueOf(type.name());
	}

	public static <enumName> getRemoteRepresentation(<pojoEnumName> pojoEnum) {
		return <enumName>.valueOf(pojoEnum.name());
	}
}
>>
