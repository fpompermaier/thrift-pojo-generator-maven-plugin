/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.disges.thrift.plugin.testdata.objects.included.package1;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TestSetStruct implements org.apache.thrift.TBase<TestSetStruct, TestSetStruct._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestSetStruct");

  private static final org.apache.thrift.protocol.TField SIMPLE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("simpleList", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField REF_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("refList", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField REF_OTHER_PACKAGE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("refOtherPackageList", org.apache.thrift.protocol.TType.SET, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TestSetStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TestSetStructTupleSchemeFactory());
  }

  public Set<Integer> simpleList; // required
  public Set<SimpleStruct> refList; // required
  public Set<org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2> refOtherPackageList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SIMPLE_LIST((short)1, "simpleList"),
    REF_LIST((short)2, "refList"),
    REF_OTHER_PACKAGE_LIST((short)3, "refOtherPackageList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SIMPLE_LIST
          return SIMPLE_LIST;
        case 2: // REF_LIST
          return REF_LIST;
        case 3: // REF_OTHER_PACKAGE_LIST
          return REF_OTHER_PACKAGE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SIMPLE_LIST, new org.apache.thrift.meta_data.FieldMetaData("simpleList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.REF_LIST, new org.apache.thrift.meta_data.FieldMetaData("refList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleStruct.class))));
    tmpMap.put(_Fields.REF_OTHER_PACKAGE_LIST, new org.apache.thrift.meta_data.FieldMetaData("refOtherPackageList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestSetStruct.class, metaDataMap);
  }

  public TestSetStruct() {
  }

  public TestSetStruct(
    Set<Integer> simpleList,
    Set<SimpleStruct> refList,
    Set<org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2> refOtherPackageList)
  {
    this();
    this.simpleList = simpleList;
    this.refList = refList;
    this.refOtherPackageList = refOtherPackageList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestSetStruct(TestSetStruct other) {
    if (other.isSetSimpleList()) {
      Set<Integer> __this__simpleList = new HashSet<Integer>();
      for (Integer other_element : other.simpleList) {
        __this__simpleList.add(other_element);
      }
      this.simpleList = __this__simpleList;
    }
    if (other.isSetRefList()) {
      Set<SimpleStruct> __this__refList = new HashSet<SimpleStruct>();
      for (SimpleStruct other_element : other.refList) {
        __this__refList.add(new SimpleStruct(other_element));
      }
      this.refList = __this__refList;
    }
    if (other.isSetRefOtherPackageList()) {
      Set<org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2> __this__refOtherPackageList = new HashSet<org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2>();
      for (org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2 other_element : other.refOtherPackageList) {
        __this__refOtherPackageList.add(new org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2(other_element));
      }
      this.refOtherPackageList = __this__refOtherPackageList;
    }
  }

  public TestSetStruct deepCopy() {
    return new TestSetStruct(this);
  }

  @Override
  public void clear() {
    this.simpleList = null;
    this.refList = null;
    this.refOtherPackageList = null;
  }

  public int getSimpleListSize() {
    return (this.simpleList == null) ? 0 : this.simpleList.size();
  }

  public java.util.Iterator<Integer> getSimpleListIterator() {
    return (this.simpleList == null) ? null : this.simpleList.iterator();
  }

  public void addToSimpleList(int elem) {
    if (this.simpleList == null) {
      this.simpleList = new HashSet<Integer>();
    }
    this.simpleList.add(elem);
  }

  public Set<Integer> getSimpleList() {
    return this.simpleList;
  }

  public TestSetStruct setSimpleList(Set<Integer> simpleList) {
    this.simpleList = simpleList;
    return this;
  }

  public void unsetSimpleList() {
    this.simpleList = null;
  }

  /** Returns true if field simpleList is set (has been assigned a value) and false otherwise */
  public boolean isSetSimpleList() {
    return this.simpleList != null;
  }

  public void setSimpleListIsSet(boolean value) {
    if (!value) {
      this.simpleList = null;
    }
  }

  public int getRefListSize() {
    return (this.refList == null) ? 0 : this.refList.size();
  }

  public java.util.Iterator<SimpleStruct> getRefListIterator() {
    return (this.refList == null) ? null : this.refList.iterator();
  }

  public void addToRefList(SimpleStruct elem) {
    if (this.refList == null) {
      this.refList = new HashSet<SimpleStruct>();
    }
    this.refList.add(elem);
  }

  public Set<SimpleStruct> getRefList() {
    return this.refList;
  }

  public TestSetStruct setRefList(Set<SimpleStruct> refList) {
    this.refList = refList;
    return this;
  }

  public void unsetRefList() {
    this.refList = null;
  }

  /** Returns true if field refList is set (has been assigned a value) and false otherwise */
  public boolean isSetRefList() {
    return this.refList != null;
  }

  public void setRefListIsSet(boolean value) {
    if (!value) {
      this.refList = null;
    }
  }

  public int getRefOtherPackageListSize() {
    return (this.refOtherPackageList == null) ? 0 : this.refOtherPackageList.size();
  }

  public java.util.Iterator<org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2> getRefOtherPackageListIterator() {
    return (this.refOtherPackageList == null) ? null : this.refOtherPackageList.iterator();
  }

  public void addToRefOtherPackageList(org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2 elem) {
    if (this.refOtherPackageList == null) {
      this.refOtherPackageList = new HashSet<org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2>();
    }
    this.refOtherPackageList.add(elem);
  }

  public Set<org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2> getRefOtherPackageList() {
    return this.refOtherPackageList;
  }

  public TestSetStruct setRefOtherPackageList(Set<org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2> refOtherPackageList) {
    this.refOtherPackageList = refOtherPackageList;
    return this;
  }

  public void unsetRefOtherPackageList() {
    this.refOtherPackageList = null;
  }

  /** Returns true if field refOtherPackageList is set (has been assigned a value) and false otherwise */
  public boolean isSetRefOtherPackageList() {
    return this.refOtherPackageList != null;
  }

  public void setRefOtherPackageListIsSet(boolean value) {
    if (!value) {
      this.refOtherPackageList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SIMPLE_LIST:
      if (value == null) {
        unsetSimpleList();
      } else {
        setSimpleList((Set<Integer>)value);
      }
      break;

    case REF_LIST:
      if (value == null) {
        unsetRefList();
      } else {
        setRefList((Set<SimpleStruct>)value);
      }
      break;

    case REF_OTHER_PACKAGE_LIST:
      if (value == null) {
        unsetRefOtherPackageList();
      } else {
        setRefOtherPackageList((Set<org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SIMPLE_LIST:
      return getSimpleList();

    case REF_LIST:
      return getRefList();

    case REF_OTHER_PACKAGE_LIST:
      return getRefOtherPackageList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SIMPLE_LIST:
      return isSetSimpleList();
    case REF_LIST:
      return isSetRefList();
    case REF_OTHER_PACKAGE_LIST:
      return isSetRefOtherPackageList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestSetStruct)
      return this.equals((TestSetStruct)that);
    return false;
  }

  public boolean equals(TestSetStruct that) {
    if (that == null)
      return false;

    boolean this_present_simpleList = true && this.isSetSimpleList();
    boolean that_present_simpleList = true && that.isSetSimpleList();
    if (this_present_simpleList || that_present_simpleList) {
      if (!(this_present_simpleList && that_present_simpleList))
        return false;
      if (!this.simpleList.equals(that.simpleList))
        return false;
    }

    boolean this_present_refList = true && this.isSetRefList();
    boolean that_present_refList = true && that.isSetRefList();
    if (this_present_refList || that_present_refList) {
      if (!(this_present_refList && that_present_refList))
        return false;
      if (!this.refList.equals(that.refList))
        return false;
    }

    boolean this_present_refOtherPackageList = true && this.isSetRefOtherPackageList();
    boolean that_present_refOtherPackageList = true && that.isSetRefOtherPackageList();
    if (this_present_refOtherPackageList || that_present_refOtherPackageList) {
      if (!(this_present_refOtherPackageList && that_present_refOtherPackageList))
        return false;
      if (!this.refOtherPackageList.equals(that.refOtherPackageList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TestSetStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TestSetStruct typedOther = (TestSetStruct)other;

    lastComparison = Boolean.valueOf(isSetSimpleList()).compareTo(typedOther.isSetSimpleList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimpleList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simpleList, typedOther.simpleList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefList()).compareTo(typedOther.isSetRefList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refList, typedOther.refList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefOtherPackageList()).compareTo(typedOther.isSetRefOtherPackageList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefOtherPackageList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refOtherPackageList, typedOther.refOtherPackageList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestSetStruct(");
    boolean first = true;

    sb.append("simpleList:");
    if (this.simpleList == null) {
      sb.append("null");
    } else {
      sb.append(this.simpleList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refList:");
    if (this.refList == null) {
      sb.append("null");
    } else {
      sb.append(this.refList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refOtherPackageList:");
    if (this.refOtherPackageList == null) {
      sb.append("null");
    } else {
      sb.append(this.refOtherPackageList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (simpleList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'simpleList' was not present! Struct: " + toString());
    }
    if (refList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'refList' was not present! Struct: " + toString());
    }
    if (refOtherPackageList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'refOtherPackageList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TestSetStructStandardSchemeFactory implements SchemeFactory {
    public TestSetStructStandardScheme getScheme() {
      return new TestSetStructStandardScheme();
    }
  }

  private static class TestSetStructStandardScheme extends StandardScheme<TestSetStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TestSetStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SIMPLE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set74 = iprot.readSetBegin();
                struct.simpleList = new HashSet<Integer>(2*_set74.size);
                for (int _i75 = 0; _i75 < _set74.size; ++_i75)
                {
                  int _elem76; // required
                  _elem76 = iprot.readI32();
                  struct.simpleList.add(_elem76);
                }
                iprot.readSetEnd();
              }
              struct.setSimpleListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REF_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set77 = iprot.readSetBegin();
                struct.refList = new HashSet<SimpleStruct>(2*_set77.size);
                for (int _i78 = 0; _i78 < _set77.size; ++_i78)
                {
                  SimpleStruct _elem79; // required
                  _elem79 = new SimpleStruct();
                  _elem79.read(iprot);
                  struct.refList.add(_elem79);
                }
                iprot.readSetEnd();
              }
              struct.setRefListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REF_OTHER_PACKAGE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set80 = iprot.readSetBegin();
                struct.refOtherPackageList = new HashSet<org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2>(2*_set80.size);
                for (int _i81 = 0; _i81 < _set80.size; ++_i81)
                {
                  org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2 _elem82; // required
                  _elem82 = new org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2();
                  _elem82.read(iprot);
                  struct.refOtherPackageList.add(_elem82);
                }
                iprot.readSetEnd();
              }
              struct.setRefOtherPackageListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TestSetStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.simpleList != null) {
        oprot.writeFieldBegin(SIMPLE_LIST_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.simpleList.size()));
          for (int _iter83 : struct.simpleList)
          {
            oprot.writeI32(_iter83);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.refList != null) {
        oprot.writeFieldBegin(REF_LIST_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.refList.size()));
          for (SimpleStruct _iter84 : struct.refList)
          {
            _iter84.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.refOtherPackageList != null) {
        oprot.writeFieldBegin(REF_OTHER_PACKAGE_LIST_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.refOtherPackageList.size()));
          for (org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2 _iter85 : struct.refOtherPackageList)
          {
            _iter85.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TestSetStructTupleSchemeFactory implements SchemeFactory {
    public TestSetStructTupleScheme getScheme() {
      return new TestSetStructTupleScheme();
    }
  }

  private static class TestSetStructTupleScheme extends TupleScheme<TestSetStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TestSetStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.simpleList.size());
        for (int _iter86 : struct.simpleList)
        {
          oprot.writeI32(_iter86);
        }
      }
      {
        oprot.writeI32(struct.refList.size());
        for (SimpleStruct _iter87 : struct.refList)
        {
          _iter87.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.refOtherPackageList.size());
        for (org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2 _iter88 : struct.refOtherPackageList)
        {
          _iter88.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TestSetStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TSet _set89 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.simpleList = new HashSet<Integer>(2*_set89.size);
        for (int _i90 = 0; _i90 < _set89.size; ++_i90)
        {
          int _elem91; // required
          _elem91 = iprot.readI32();
          struct.simpleList.add(_elem91);
        }
      }
      struct.setSimpleListIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set92 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.refList = new HashSet<SimpleStruct>(2*_set92.size);
        for (int _i93 = 0; _i93 < _set92.size; ++_i93)
        {
          SimpleStruct _elem94; // required
          _elem94 = new SimpleStruct();
          _elem94.read(iprot);
          struct.refList.add(_elem94);
        }
      }
      struct.setRefListIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set95 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.refOtherPackageList = new HashSet<org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2>(2*_set95.size);
        for (int _i96 = 0; _i96 < _set95.size; ++_i96)
        {
          org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2 _elem97; // required
          _elem97 = new org.disges.thrift.plugin.testdata.objects.included.package2.SimpleStructPackage2();
          _elem97.read(iprot);
          struct.refOtherPackageList.add(_elem97);
        }
      }
      struct.setRefOtherPackageListIsSet(true);
    }
  }

}

