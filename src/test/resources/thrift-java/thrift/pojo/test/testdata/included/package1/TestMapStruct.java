/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.pojo.test.testdata.included.package1;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TestMapStruct implements org.apache.thrift.TBase<TestMapStruct, TestMapStruct._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestMapStruct");

  private static final org.apache.thrift.protocol.TField REF_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("refMap", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField REF_VALUE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("refValueMap", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField REF_KEY_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("refKeyMap", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField SIMPLE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("simpleMap", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField REF_OTHER_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("refOtherPackage", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TestMapStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TestMapStructTupleSchemeFactory());
  }

  public Map<MapKey,MapValue> refMap; // required
  public Map<Integer,MapValue> refValueMap; // required
  public Map<MapKey,Integer> refKeyMap; // required
  public Map<String,Integer> simpleMap; // required
  public Map<thrift.pojo.test.testdata.included.package2.SimpleStructPackage2,Integer> refOtherPackage; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REF_MAP((short)1, "refMap"),
    REF_VALUE_MAP((short)2, "refValueMap"),
    REF_KEY_MAP((short)3, "refKeyMap"),
    SIMPLE_MAP((short)4, "simpleMap"),
    REF_OTHER_PACKAGE((short)5, "refOtherPackage");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REF_MAP
          return REF_MAP;
        case 2: // REF_VALUE_MAP
          return REF_VALUE_MAP;
        case 3: // REF_KEY_MAP
          return REF_KEY_MAP;
        case 4: // SIMPLE_MAP
          return SIMPLE_MAP;
        case 5: // REF_OTHER_PACKAGE
          return REF_OTHER_PACKAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REF_MAP, new org.apache.thrift.meta_data.FieldMetaData("refMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MapKey.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MapValue.class))));
    tmpMap.put(_Fields.REF_VALUE_MAP, new org.apache.thrift.meta_data.FieldMetaData("refValueMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MapValue.class))));
    tmpMap.put(_Fields.REF_KEY_MAP, new org.apache.thrift.meta_data.FieldMetaData("refKeyMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MapKey.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SIMPLE_MAP, new org.apache.thrift.meta_data.FieldMetaData("simpleMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.REF_OTHER_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("refOtherPackage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.pojo.test.testdata.included.package2.SimpleStructPackage2.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestMapStruct.class, metaDataMap);
  }

  public TestMapStruct() {
  }

  public TestMapStruct(
    Map<MapKey,MapValue> refMap,
    Map<Integer,MapValue> refValueMap,
    Map<MapKey,Integer> refKeyMap,
    Map<String,Integer> simpleMap,
    Map<thrift.pojo.test.testdata.included.package2.SimpleStructPackage2,Integer> refOtherPackage)
  {
    this();
    this.refMap = refMap;
    this.refValueMap = refValueMap;
    this.refKeyMap = refKeyMap;
    this.simpleMap = simpleMap;
    this.refOtherPackage = refOtherPackage;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestMapStruct(TestMapStruct other) {
    if (other.isSetRefMap()) {
      Map<MapKey,MapValue> __this__refMap = new HashMap<MapKey,MapValue>();
      for (Map.Entry<MapKey, MapValue> other_element : other.refMap.entrySet()) {

        MapKey other_element_key = other_element.getKey();
        MapValue other_element_value = other_element.getValue();

        MapKey __this__refMap_copy_key = new MapKey(other_element_key);

        MapValue __this__refMap_copy_value = new MapValue(other_element_value);

        __this__refMap.put(__this__refMap_copy_key, __this__refMap_copy_value);
      }
      this.refMap = __this__refMap;
    }
    if (other.isSetRefValueMap()) {
      Map<Integer,MapValue> __this__refValueMap = new HashMap<Integer,MapValue>();
      for (Map.Entry<Integer, MapValue> other_element : other.refValueMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        MapValue other_element_value = other_element.getValue();

        Integer __this__refValueMap_copy_key = other_element_key;

        MapValue __this__refValueMap_copy_value = new MapValue(other_element_value);

        __this__refValueMap.put(__this__refValueMap_copy_key, __this__refValueMap_copy_value);
      }
      this.refValueMap = __this__refValueMap;
    }
    if (other.isSetRefKeyMap()) {
      Map<MapKey,Integer> __this__refKeyMap = new HashMap<MapKey,Integer>();
      for (Map.Entry<MapKey, Integer> other_element : other.refKeyMap.entrySet()) {

        MapKey other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        MapKey __this__refKeyMap_copy_key = new MapKey(other_element_key);

        Integer __this__refKeyMap_copy_value = other_element_value;

        __this__refKeyMap.put(__this__refKeyMap_copy_key, __this__refKeyMap_copy_value);
      }
      this.refKeyMap = __this__refKeyMap;
    }
    if (other.isSetSimpleMap()) {
      Map<String,Integer> __this__simpleMap = new HashMap<String,Integer>();
      for (Map.Entry<String, Integer> other_element : other.simpleMap.entrySet()) {

        String other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        String __this__simpleMap_copy_key = other_element_key;

        Integer __this__simpleMap_copy_value = other_element_value;

        __this__simpleMap.put(__this__simpleMap_copy_key, __this__simpleMap_copy_value);
      }
      this.simpleMap = __this__simpleMap;
    }
    if (other.isSetRefOtherPackage()) {
      Map<thrift.pojo.test.testdata.included.package2.SimpleStructPackage2,Integer> __this__refOtherPackage = new HashMap<thrift.pojo.test.testdata.included.package2.SimpleStructPackage2,Integer>();
      for (Map.Entry<thrift.pojo.test.testdata.included.package2.SimpleStructPackage2, Integer> other_element : other.refOtherPackage.entrySet()) {

        thrift.pojo.test.testdata.included.package2.SimpleStructPackage2 other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        thrift.pojo.test.testdata.included.package2.SimpleStructPackage2 __this__refOtherPackage_copy_key = new thrift.pojo.test.testdata.included.package2.SimpleStructPackage2(other_element_key);

        Integer __this__refOtherPackage_copy_value = other_element_value;

        __this__refOtherPackage.put(__this__refOtherPackage_copy_key, __this__refOtherPackage_copy_value);
      }
      this.refOtherPackage = __this__refOtherPackage;
    }
  }

  public TestMapStruct deepCopy() {
    return new TestMapStruct(this);
  }

  @Override
  public void clear() {
    this.refMap = null;
    this.refValueMap = null;
    this.refKeyMap = null;
    this.simpleMap = null;
    this.refOtherPackage = null;
  }

  public int getRefMapSize() {
    return (this.refMap == null) ? 0 : this.refMap.size();
  }

  public void putToRefMap(MapKey key, MapValue val) {
    if (this.refMap == null) {
      this.refMap = new HashMap<MapKey,MapValue>();
    }
    this.refMap.put(key, val);
  }

  public Map<MapKey,MapValue> getRefMap() {
    return this.refMap;
  }

  public TestMapStruct setRefMap(Map<MapKey,MapValue> refMap) {
    this.refMap = refMap;
    return this;
  }

  public void unsetRefMap() {
    this.refMap = null;
  }

  /** Returns true if field refMap is set (has been assigned a value) and false otherwise */
  public boolean isSetRefMap() {
    return this.refMap != null;
  }

  public void setRefMapIsSet(boolean value) {
    if (!value) {
      this.refMap = null;
    }
  }

  public int getRefValueMapSize() {
    return (this.refValueMap == null) ? 0 : this.refValueMap.size();
  }

  public void putToRefValueMap(int key, MapValue val) {
    if (this.refValueMap == null) {
      this.refValueMap = new HashMap<Integer,MapValue>();
    }
    this.refValueMap.put(key, val);
  }

  public Map<Integer,MapValue> getRefValueMap() {
    return this.refValueMap;
  }

  public TestMapStruct setRefValueMap(Map<Integer,MapValue> refValueMap) {
    this.refValueMap = refValueMap;
    return this;
  }

  public void unsetRefValueMap() {
    this.refValueMap = null;
  }

  /** Returns true if field refValueMap is set (has been assigned a value) and false otherwise */
  public boolean isSetRefValueMap() {
    return this.refValueMap != null;
  }

  public void setRefValueMapIsSet(boolean value) {
    if (!value) {
      this.refValueMap = null;
    }
  }

  public int getRefKeyMapSize() {
    return (this.refKeyMap == null) ? 0 : this.refKeyMap.size();
  }

  public void putToRefKeyMap(MapKey key, int val) {
    if (this.refKeyMap == null) {
      this.refKeyMap = new HashMap<MapKey,Integer>();
    }
    this.refKeyMap.put(key, val);
  }

  public Map<MapKey,Integer> getRefKeyMap() {
    return this.refKeyMap;
  }

  public TestMapStruct setRefKeyMap(Map<MapKey,Integer> refKeyMap) {
    this.refKeyMap = refKeyMap;
    return this;
  }

  public void unsetRefKeyMap() {
    this.refKeyMap = null;
  }

  /** Returns true if field refKeyMap is set (has been assigned a value) and false otherwise */
  public boolean isSetRefKeyMap() {
    return this.refKeyMap != null;
  }

  public void setRefKeyMapIsSet(boolean value) {
    if (!value) {
      this.refKeyMap = null;
    }
  }

  public int getSimpleMapSize() {
    return (this.simpleMap == null) ? 0 : this.simpleMap.size();
  }

  public void putToSimpleMap(String key, int val) {
    if (this.simpleMap == null) {
      this.simpleMap = new HashMap<String,Integer>();
    }
    this.simpleMap.put(key, val);
  }

  public Map<String,Integer> getSimpleMap() {
    return this.simpleMap;
  }

  public TestMapStruct setSimpleMap(Map<String,Integer> simpleMap) {
    this.simpleMap = simpleMap;
    return this;
  }

  public void unsetSimpleMap() {
    this.simpleMap = null;
  }

  /** Returns true if field simpleMap is set (has been assigned a value) and false otherwise */
  public boolean isSetSimpleMap() {
    return this.simpleMap != null;
  }

  public void setSimpleMapIsSet(boolean value) {
    if (!value) {
      this.simpleMap = null;
    }
  }

  public int getRefOtherPackageSize() {
    return (this.refOtherPackage == null) ? 0 : this.refOtherPackage.size();
  }

  public void putToRefOtherPackage(thrift.pojo.test.testdata.included.package2.SimpleStructPackage2 key, int val) {
    if (this.refOtherPackage == null) {
      this.refOtherPackage = new HashMap<thrift.pojo.test.testdata.included.package2.SimpleStructPackage2,Integer>();
    }
    this.refOtherPackage.put(key, val);
  }

  public Map<thrift.pojo.test.testdata.included.package2.SimpleStructPackage2,Integer> getRefOtherPackage() {
    return this.refOtherPackage;
  }

  public TestMapStruct setRefOtherPackage(Map<thrift.pojo.test.testdata.included.package2.SimpleStructPackage2,Integer> refOtherPackage) {
    this.refOtherPackage = refOtherPackage;
    return this;
  }

  public void unsetRefOtherPackage() {
    this.refOtherPackage = null;
  }

  /** Returns true if field refOtherPackage is set (has been assigned a value) and false otherwise */
  public boolean isSetRefOtherPackage() {
    return this.refOtherPackage != null;
  }

  public void setRefOtherPackageIsSet(boolean value) {
    if (!value) {
      this.refOtherPackage = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REF_MAP:
      if (value == null) {
        unsetRefMap();
      } else {
        setRefMap((Map<MapKey,MapValue>)value);
      }
      break;

    case REF_VALUE_MAP:
      if (value == null) {
        unsetRefValueMap();
      } else {
        setRefValueMap((Map<Integer,MapValue>)value);
      }
      break;

    case REF_KEY_MAP:
      if (value == null) {
        unsetRefKeyMap();
      } else {
        setRefKeyMap((Map<MapKey,Integer>)value);
      }
      break;

    case SIMPLE_MAP:
      if (value == null) {
        unsetSimpleMap();
      } else {
        setSimpleMap((Map<String,Integer>)value);
      }
      break;

    case REF_OTHER_PACKAGE:
      if (value == null) {
        unsetRefOtherPackage();
      } else {
        setRefOtherPackage((Map<thrift.pojo.test.testdata.included.package2.SimpleStructPackage2,Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REF_MAP:
      return getRefMap();

    case REF_VALUE_MAP:
      return getRefValueMap();

    case REF_KEY_MAP:
      return getRefKeyMap();

    case SIMPLE_MAP:
      return getSimpleMap();

    case REF_OTHER_PACKAGE:
      return getRefOtherPackage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REF_MAP:
      return isSetRefMap();
    case REF_VALUE_MAP:
      return isSetRefValueMap();
    case REF_KEY_MAP:
      return isSetRefKeyMap();
    case SIMPLE_MAP:
      return isSetSimpleMap();
    case REF_OTHER_PACKAGE:
      return isSetRefOtherPackage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestMapStruct)
      return this.equals((TestMapStruct)that);
    return false;
  }

  public boolean equals(TestMapStruct that) {
    if (that == null)
      return false;

    boolean this_present_refMap = true && this.isSetRefMap();
    boolean that_present_refMap = true && that.isSetRefMap();
    if (this_present_refMap || that_present_refMap) {
      if (!(this_present_refMap && that_present_refMap))
        return false;
      if (!this.refMap.equals(that.refMap))
        return false;
    }

    boolean this_present_refValueMap = true && this.isSetRefValueMap();
    boolean that_present_refValueMap = true && that.isSetRefValueMap();
    if (this_present_refValueMap || that_present_refValueMap) {
      if (!(this_present_refValueMap && that_present_refValueMap))
        return false;
      if (!this.refValueMap.equals(that.refValueMap))
        return false;
    }

    boolean this_present_refKeyMap = true && this.isSetRefKeyMap();
    boolean that_present_refKeyMap = true && that.isSetRefKeyMap();
    if (this_present_refKeyMap || that_present_refKeyMap) {
      if (!(this_present_refKeyMap && that_present_refKeyMap))
        return false;
      if (!this.refKeyMap.equals(that.refKeyMap))
        return false;
    }

    boolean this_present_simpleMap = true && this.isSetSimpleMap();
    boolean that_present_simpleMap = true && that.isSetSimpleMap();
    if (this_present_simpleMap || that_present_simpleMap) {
      if (!(this_present_simpleMap && that_present_simpleMap))
        return false;
      if (!this.simpleMap.equals(that.simpleMap))
        return false;
    }

    boolean this_present_refOtherPackage = true && this.isSetRefOtherPackage();
    boolean that_present_refOtherPackage = true && that.isSetRefOtherPackage();
    if (this_present_refOtherPackage || that_present_refOtherPackage) {
      if (!(this_present_refOtherPackage && that_present_refOtherPackage))
        return false;
      if (!this.refOtherPackage.equals(that.refOtherPackage))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TestMapStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TestMapStruct typedOther = (TestMapStruct)other;

    lastComparison = Boolean.valueOf(isSetRefMap()).compareTo(typedOther.isSetRefMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refMap, typedOther.refMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefValueMap()).compareTo(typedOther.isSetRefValueMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefValueMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refValueMap, typedOther.refValueMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefKeyMap()).compareTo(typedOther.isSetRefKeyMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefKeyMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refKeyMap, typedOther.refKeyMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSimpleMap()).compareTo(typedOther.isSetSimpleMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimpleMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simpleMap, typedOther.simpleMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefOtherPackage()).compareTo(typedOther.isSetRefOtherPackage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefOtherPackage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refOtherPackage, typedOther.refOtherPackage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestMapStruct(");
    boolean first = true;

    sb.append("refMap:");
    if (this.refMap == null) {
      sb.append("null");
    } else {
      sb.append(this.refMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refValueMap:");
    if (this.refValueMap == null) {
      sb.append("null");
    } else {
      sb.append(this.refValueMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refKeyMap:");
    if (this.refKeyMap == null) {
      sb.append("null");
    } else {
      sb.append(this.refKeyMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("simpleMap:");
    if (this.simpleMap == null) {
      sb.append("null");
    } else {
      sb.append(this.simpleMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refOtherPackage:");
    if (this.refOtherPackage == null) {
      sb.append("null");
    } else {
      sb.append(this.refOtherPackage);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (refMap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'refMap' was not present! Struct: " + toString());
    }
    if (refValueMap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'refValueMap' was not present! Struct: " + toString());
    }
    if (refKeyMap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'refKeyMap' was not present! Struct: " + toString());
    }
    if (simpleMap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'simpleMap' was not present! Struct: " + toString());
    }
    if (refOtherPackage == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'refOtherPackage' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TestMapStructStandardSchemeFactory implements SchemeFactory {
    public TestMapStructStandardScheme getScheme() {
      return new TestMapStructStandardScheme();
    }
  }

  private static class TestMapStructStandardScheme extends StandardScheme<TestMapStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TestMapStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REF_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.refMap = new HashMap<MapKey,MapValue>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  MapKey _key2; // required
                  MapValue _val3; // required
                  _key2 = new MapKey();
                  _key2.read(iprot);
                  _val3 = new MapValue();
                  _val3.read(iprot);
                  struct.refMap.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setRefMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REF_VALUE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.refValueMap = new HashMap<Integer,MapValue>(2*_map4.size);
                for (int _i5 = 0; _i5 < _map4.size; ++_i5)
                {
                  int _key6; // required
                  MapValue _val7; // required
                  _key6 = iprot.readI32();
                  _val7 = new MapValue();
                  _val7.read(iprot);
                  struct.refValueMap.put(_key6, _val7);
                }
                iprot.readMapEnd();
              }
              struct.setRefValueMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REF_KEY_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.refKeyMap = new HashMap<MapKey,Integer>(2*_map8.size);
                for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                {
                  MapKey _key10; // required
                  int _val11; // required
                  _key10 = new MapKey();
                  _key10.read(iprot);
                  _val11 = iprot.readI32();
                  struct.refKeyMap.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setRefKeyMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SIMPLE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map12 = iprot.readMapBegin();
                struct.simpleMap = new HashMap<String,Integer>(2*_map12.size);
                for (int _i13 = 0; _i13 < _map12.size; ++_i13)
                {
                  String _key14; // required
                  int _val15; // required
                  _key14 = iprot.readString();
                  _val15 = iprot.readI32();
                  struct.simpleMap.put(_key14, _val15);
                }
                iprot.readMapEnd();
              }
              struct.setSimpleMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REF_OTHER_PACKAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.refOtherPackage = new HashMap<thrift.pojo.test.testdata.included.package2.SimpleStructPackage2,Integer>(2*_map16.size);
                for (int _i17 = 0; _i17 < _map16.size; ++_i17)
                {
                  thrift.pojo.test.testdata.included.package2.SimpleStructPackage2 _key18; // required
                  int _val19; // required
                  _key18 = new thrift.pojo.test.testdata.included.package2.SimpleStructPackage2();
                  _key18.read(iprot);
                  _val19 = iprot.readI32();
                  struct.refOtherPackage.put(_key18, _val19);
                }
                iprot.readMapEnd();
              }
              struct.setRefOtherPackageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TestMapStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.refMap != null) {
        oprot.writeFieldBegin(REF_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, struct.refMap.size()));
          for (Map.Entry<MapKey, MapValue> _iter20 : struct.refMap.entrySet())
          {
            _iter20.getKey().write(oprot);
            _iter20.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.refValueMap != null) {
        oprot.writeFieldBegin(REF_VALUE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.refValueMap.size()));
          for (Map.Entry<Integer, MapValue> _iter21 : struct.refValueMap.entrySet())
          {
            oprot.writeI32(_iter21.getKey());
            _iter21.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.refKeyMap != null) {
        oprot.writeFieldBegin(REF_KEY_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I32, struct.refKeyMap.size()));
          for (Map.Entry<MapKey, Integer> _iter22 : struct.refKeyMap.entrySet())
          {
            _iter22.getKey().write(oprot);
            oprot.writeI32(_iter22.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.simpleMap != null) {
        oprot.writeFieldBegin(SIMPLE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.simpleMap.size()));
          for (Map.Entry<String, Integer> _iter23 : struct.simpleMap.entrySet())
          {
            oprot.writeString(_iter23.getKey());
            oprot.writeI32(_iter23.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.refOtherPackage != null) {
        oprot.writeFieldBegin(REF_OTHER_PACKAGE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I32, struct.refOtherPackage.size()));
          for (Map.Entry<thrift.pojo.test.testdata.included.package2.SimpleStructPackage2, Integer> _iter24 : struct.refOtherPackage.entrySet())
          {
            _iter24.getKey().write(oprot);
            oprot.writeI32(_iter24.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TestMapStructTupleSchemeFactory implements SchemeFactory {
    public TestMapStructTupleScheme getScheme() {
      return new TestMapStructTupleScheme();
    }
  }

  private static class TestMapStructTupleScheme extends TupleScheme<TestMapStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TestMapStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.refMap.size());
        for (Map.Entry<MapKey, MapValue> _iter25 : struct.refMap.entrySet())
        {
          _iter25.getKey().write(oprot);
          _iter25.getValue().write(oprot);
        }
      }
      {
        oprot.writeI32(struct.refValueMap.size());
        for (Map.Entry<Integer, MapValue> _iter26 : struct.refValueMap.entrySet())
        {
          oprot.writeI32(_iter26.getKey());
          _iter26.getValue().write(oprot);
        }
      }
      {
        oprot.writeI32(struct.refKeyMap.size());
        for (Map.Entry<MapKey, Integer> _iter27 : struct.refKeyMap.entrySet())
        {
          _iter27.getKey().write(oprot);
          oprot.writeI32(_iter27.getValue());
        }
      }
      {
        oprot.writeI32(struct.simpleMap.size());
        for (Map.Entry<String, Integer> _iter28 : struct.simpleMap.entrySet())
        {
          oprot.writeString(_iter28.getKey());
          oprot.writeI32(_iter28.getValue());
        }
      }
      {
        oprot.writeI32(struct.refOtherPackage.size());
        for (Map.Entry<thrift.pojo.test.testdata.included.package2.SimpleStructPackage2, Integer> _iter29 : struct.refOtherPackage.entrySet())
        {
          _iter29.getKey().write(oprot);
          oprot.writeI32(_iter29.getValue());
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TestMapStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map30 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.refMap = new HashMap<MapKey,MapValue>(2*_map30.size);
        for (int _i31 = 0; _i31 < _map30.size; ++_i31)
        {
          MapKey _key32; // required
          MapValue _val33; // required
          _key32 = new MapKey();
          _key32.read(iprot);
          _val33 = new MapValue();
          _val33.read(iprot);
          struct.refMap.put(_key32, _val33);
        }
      }
      struct.setRefMapIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map34 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.refValueMap = new HashMap<Integer,MapValue>(2*_map34.size);
        for (int _i35 = 0; _i35 < _map34.size; ++_i35)
        {
          int _key36; // required
          MapValue _val37; // required
          _key36 = iprot.readI32();
          _val37 = new MapValue();
          _val37.read(iprot);
          struct.refValueMap.put(_key36, _val37);
        }
      }
      struct.setRefValueMapIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map38 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.refKeyMap = new HashMap<MapKey,Integer>(2*_map38.size);
        for (int _i39 = 0; _i39 < _map38.size; ++_i39)
        {
          MapKey _key40; // required
          int _val41; // required
          _key40 = new MapKey();
          _key40.read(iprot);
          _val41 = iprot.readI32();
          struct.refKeyMap.put(_key40, _val41);
        }
      }
      struct.setRefKeyMapIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map42 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.simpleMap = new HashMap<String,Integer>(2*_map42.size);
        for (int _i43 = 0; _i43 < _map42.size; ++_i43)
        {
          String _key44; // required
          int _val45; // required
          _key44 = iprot.readString();
          _val45 = iprot.readI32();
          struct.simpleMap.put(_key44, _val45);
        }
      }
      struct.setSimpleMapIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.refOtherPackage = new HashMap<thrift.pojo.test.testdata.included.package2.SimpleStructPackage2,Integer>(2*_map46.size);
        for (int _i47 = 0; _i47 < _map46.size; ++_i47)
        {
          thrift.pojo.test.testdata.included.package2.SimpleStructPackage2 _key48; // required
          int _val49; // required
          _key48 = new thrift.pojo.test.testdata.included.package2.SimpleStructPackage2();
          _key48.read(iprot);
          _val49 = iprot.readI32();
          struct.refOtherPackage.put(_key48, _val49);
        }
      }
      struct.setRefOtherPackageIsSet(true);
    }
  }

}

